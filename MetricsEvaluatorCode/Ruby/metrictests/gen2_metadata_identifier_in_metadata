#!/home/mark_moby_wilkinson/.rvm/rubies/ruby-2.5.1/bin/ruby
require_relative 'fair_metrics_utilities'
require 'cgi'
require 'json'
require 'uri'
require 'rdf'
require 'rdf/turtle'
require 'sparql'


debug = false

def testGUID
	guid = @swagger.testedGUID
	
	metadata = Utils::resolveit(guid)  # this is where the magic happens!

	metadata.comments.each do |c|
		@swagger.addComment(c)
	end

	if metadata.guidtype == "unknown"
		@swagger.addComment("  The identifier #{guid} did not match any known identification system (tested inchi, doi, handle, uri) and therefore did not pass this metric.  If you think this is an error, please contact the FAIR Metrics group (http://fairmetrics.org).")
		@swagger.score = 0
		return @swagger.createEvaluationResponse
	end	

	if metadata.graph.size > 0
		
		# query pattern-match in an object position
		query = SPARQL.parse("select ?s ?p ?o where {?s ?p ?o . FILTER(CONTAINS(str(?o), '#{guid}'))}")
		results = query.execute(metadata.graph)	
		if results.any?
			f = results.first
			@swagger.addComment("Found pattern-match in metadata #{f[:s]} #{f[:p]} #{f[:o]}.  This scores as a success, but an additional more rigorous test will now be executed.  ")		
			@swagger.score = 1.0
		end
		
		# query pattern-match in an subject position
		query = SPARQL.parse("select ?s ?p ?o where {?s ?p ?o . FILTER(CONTAINS(str(?s), '#{guid}'))}")
		results = query.execute(metadata.graph)	
		if results.any?
			f = results.first
			@swagger.addComment("Found pattern-match in metadata #{f[:s]} #{f[:p]} #{f[:o]}.  This provides a success score; however, a more rigorous test will now be executed.")		
			@swagger.score = 1.0
		end

		query = SPARQL.parse("select ?s ?p ?o WHERE {?s ?p ?o . FILTER(str(?o)='#{guid}')}")
		results = query.execute(metadata.graph)
		@swagger.addComment("Looking for exact-match of #{guid}, with no prefixes or suffixes in RDF output.   ")
		if results.any?
			@swagger.score = 1.0
			@swagger.addComment("Found exact-match of #{guid} (e.g. as a string) in RDF output.   ")
			f = results.first
			@swagger.addComment("found matching metadata #{f[:s]} #{f[:p]} #{f[:o]}.  Success!")		
		end
		
		query = SPARQL.parse("select ?s ?p ?o WHERE {?s ?p ?o . FILTER(str(?s)='#{guid}')}")
		results = query.execute(metadata.graph)
		@swagger.addComment("Looking for exact-match of #{guid}, with no prefixes or suffixes in RDF output.   ")
		if results.any?
			@swagger.score = 1
			@swagger.addComment("Found exact-match of #{guid} (e.g. as a string) in RDF output.   ")
			f = results.first
			@swagger.addComment("found matching metadata #{f[:s]} #{f[:p]} #{f[:o]}.  Success!")		
		end

	end
	
	if metadata.hash.size > 1
		properties = Utils::deep_dive_properties(hash)

		properties.each do |keyval|
			key, value = nil, nil
			(key, value) = keyval;
			key = key.to_s
			if key =~ /#{guid}/ or value.to_s =~ /#{guid}/
				@swagger.addComment "found #{guid} in hashed metadata.  "
				@swagger.score = 1.0
			end
		end
	end
	if @swagger.score == 0  # if still zero, try the raw unstructured content	
		metadata.full_response.each do |httpresponse|
			if httpresponse.body.include?guid
				@swagger.addComment("  The identifier #{guid} was found within the raw content returned by resolution of that identifier.  ")
				@swagger.score = 1.0
				return @swagger.createEvaluationResponse
			else
				@swagger.addComment("  The identifier #{guid} was not found in either the structured or unstructured content from resolving that identifier.   ")
			end
		end
		
	end

	@swagger.score = 1.0 if @swagger.score > 1.0
	return @swagger.createEvaluationResponse  # release the result from all other tests
	
end



# =======================================================================


if debug
#       @input = '{"subject": "10.5281/zenodo.1147435"}'  # doi
#       @input = '{"subject": "http://cnn.com"}'  # url
#       @input = '{"subject": "BSYNRYMUTXBXSQ-UHFFFAOYSA-N"}' # inchi
#       @input = '{"subject": "LFQSCWFLJHTTHZ-UHFFFAOYSA-N"}' # another inchi
#       @input = '{"subject": "20.1000/105"}'  # handle
        @input = '{"subject": "http://linkeddata.systems/Magnaporthe/polyA_Sites"}'  # handle
else
	@input = $stdin.read
end

cgi = CGI.new

schemas = {'subject' => ['string', "the GUID being tested"]}

@swagger = Swagger.new({
			:title => "FAIR Metrics Gen2- Metadata Identifier Explicitly In Metadata",
			:description => "Metric to test if the metadata contains the unique identifier to the metadata itself.  This is done using a variety of 'scraping' tools, including DOI metadata resolution, the use of the 'extruct' Python tool, and others...",
			:tests_metric => 'https://purl.org/fair-metrics/Gen2_FM_F3',
			:applies_to_principle => "F3",
			:organization => 'FAIR Metrics Authoring Group',
			:org_url => 'http://fairmetrics.org',
			:responsible_developer => "Mark D Wilkinson",
			:email => 'markw@illuminae.com',
			:developer_ORCiD => '0000-0001-6960-357X',
			:protocol => 'http',
			:host => 'linkeddata.systems',
			:basePath => '/cgi-bin',
			:path => '/FAIR_Tests/gen2_metadata_identifier_in_metadata',
			:response_description => 'The response is a value between 0 and 1, depending on the precision of the match found (regexp match scores slightly lower)',
			:schemas => schemas,
			:fairsharing_key_location => '../fairsharing.key',
				 				 
})

if (!cgi.request_method or cgi.request_method == "GET") and !debug
        puts "Content-type: application/openapi+yaml;version=3.0\n\n"
        puts @swagger.getSwagger
elsif cgi.request_method == "POST" or debug
        input_json = JSON.parse(@input)
        guid = input_json["subject"]
        @swagger.testedGUID = guid
        response = testGUID
        puts "Content-type: application/json+ld\n\n"
        puts response
end
