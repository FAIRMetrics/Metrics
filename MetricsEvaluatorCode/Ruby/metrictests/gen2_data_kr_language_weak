#!/home/mark_moby_wilkinson/.rvm/rubies/ruby-2.5.1/bin/ruby
require_relative 'fair_metrics_utilities'
require 'cgi'
require 'json'
require 'uri'
require 'rdf'
require 'rdf/turtle'
require 'sparql'

debug = false

def testGUID
	
	guid = @swagger.testedGUID
	
	metadata = Utils::resolveit(guid)  # this is where the magic happens!

	metadata.comments.each do |c|
		@swagger.addComment(c)
	end

	if metadata.guidtype == "unknown"
		@swagger.addComment("  The identifier #{guid} did not match any known identification system (tested inchi, doi, handle, uri) and therefore did not pass this metric.  If you think this is an error, please contact the FAIR Metrics group (http://fairmetrics.org).")
		@swagger.score = 0
		return @swagger.createEvaluationResponse
	end
	
	hash = metadata.hash
	
	properties = Utils::deep_dive_properties(hash)

	
	properties.each do |keyval|
		key, value = nil, nil
		(key, value) = keyval;
		key = key.to_s
		if key =~ /codeRepository/
			@swagger.addComment "found 'codeRepository' in metadata.  "
			@identifier = value.to_s
		elsif key =~ /distribution/
			@swagger.addComment "found 'distribution' in metadata.  "
			@identifier = value.to_s
		elsif key =~ /contains/
			@swagger.addComment "found 'contains' in metadata.  "
			@identifier = value.to_s
		elsif key =~ /mainEntity/
			@swagger.addComment "found schema 'mainEntity' in metadata.  "
			@identifier = value.to_s
		elsif key =~ /primaryTopic/
			@swagger.addComment "found 'primaryTopic' in metadata.  "
			@identifier = value.to_s
		elsif key =~ /is-about/ or key =~ /IAO:0000136/ or key =~ /IAO_0000136/
			@swagger.addComment "found Information Artifact Ontology 'is-about' in metadata.  "
			@identifier = value.to_s
		elsif key =~ /SIO:000332/ or key =~ /SIO_000332/
			@swagger.addComment "found SIO is about in metadata.  "
			@identifier = value.to_s
		end
	end

	g = metadata.graph
	if @swagger.debug
		g.each {|s| $stderr.puts s.subject.to_s + "\tPRED: " + s.predicate.to_s + "\tOBJ: " + s.object.to_s + "\n"}
	end
	
	if g.size > 0  # have we found anything yet?
		query = SPARQL.parse("select ?o where {?s <http://semanticscience.org/resource/is-about> ?o}")
		results = query.execute(g)
		if results.any?
			@swagger.addComment "found identifier #{results.first[:o]} using SIO. "
			@identifier = results.first[:o].value
		end

		query = SPARQL.parse("select ?o where {?s <http://semanticscience.org/resource/SIO_000332> ?o}")
		results = query.execute(g)
		if  results.any?
			@swagger.addComment "found identifier #{results.first[:o]} using SIO. "
			@identifier = results.first[:o].value
		end


		query = SPARQL.parse("select ?o where {?s <http://schema.org/mainEntity> ?o}")
		results = query.execute(g)
		if  results.any?
			@swagger.addComment "found identifier #{results.first[:o]} using Schema.org mainEntity property. "
			@identifier = results.first[:o].value
		end

		query = SPARQL.parse("select ?o where
							 {?s <http://schema.org/distribution> ?d.
							 ?d <http://schema.org/contentURL> ?o}")
		results = query.execute(g)
		if  results.any?
			@swagger.addComment "found identifier #{results.first[:o]} using Schema.org distribution property. "
			@identifier = results.first[:o].value
			$stderr.puts "\n\nfound identifier #{@identifier} using Schema.org distribution property.\n\n"
		end

		query = SPARQL.parse("select ?o where {?s <http://purl.obolibrary.org/obo/IAO_0000136> ?o}")
		results = query.execute(g)
		if  results.any?
			@swagger.addComment "found identifier #{results.first[:o]} using IAO. "
			@identifier = results.first[:o].value
		end

		
		query = SPARQL.parse("select ?o where {?s <http://schema.org/codeRepository> ?o}")
		results = query.execute(g)
		if  results.any?
			@swagger.addComment "found identifier #{results.first[:o]} using schema.org. "
			@identifier = results.first[:o].value
		end

		query = SPARQL.parse("select ?o where {?s <http://www.w3.org/ns/ldp#contains> ?o}")
		results = query.execute(g)
		if  results.any?
			@swagger.addComment "found identifier #{results.first[:o]} using Linked Data Platform Contains. "
			@identifier = results.first[:o].value
		end
		
		# hopefully we have it by now... if not... we fail!
		$stderr.puts "\n\nfound identifier #{@identifier} \n\n"

		unless @identifier
			@swagger.score = 0
			@swagger.addComment "Was unable to locate the data identifier in the metadata using any (common) property/predicate reserved for this purpose.  Tested SIO:is-about, SIO:0003323, schema:mainEntity, IAO:0000136, schema:codeRepository, and foaf:primaryTopic.  Fail. "
		else
			testIdentifier(@identifier) # this will add more comments and a score to @swagger
		end
	end

	return @swagger.createEvaluationResponse
end


def testIdentifier(guid)
	
	# This is verbatim from the gen2_metadata_identifier_persistence
	datametadata = Utils::resolveit(guid)  # this is where the magic happens!

	datametadata.comments.each do |c|
		@swagger.addComment(c)
	end

	if datametadata.guidtype == "unknown"
		@swagger.addComment("  The GUID identifier of the data #{guid} did not match any known identification system (tested inchi, doi, handle, uri) and therefore did not pass this metric.  If you think this is an error, please contact the FAIR Metrics group (http://fairmetrics.org).")
	elsif datametadata.guidtype == "handle"
		@swagger.addComment("The GUID of the data is a Handle. ")
	elsif datametadata.guidtype == "doi"
		@swagger.addComment("The GUID of the data is a DOI. ")
	elsif datametadata.guidtype == "inchi"
		@swagger.addComment("The GUID of the data is a InChI. ")
	else
		@swagger.addComment("The GUID of the data appears to be a URL.  ")
	end

	hash = datametadata.hash
	graph = datametadata.graph
	
	if hash.any?
		@swagger.addComment("The data was found to have at least some structured data format. ")
		@swagger.score = 1
	elsif graph.size > 0
		@swagger.addComment("The data was found to have at least some structured data format. ")
		@swagger.score = 1
	else
		@swagger.addComment("The resolved data, after both parsing and content-negotiation, appears to have no structured data.  ")
	end

end


if debug
#	@input = '{"subject": "10.5281/zenodo.1147435"}'  # doi fail
#	@input = '{"subject": "10.5281/zenodo.1065973"}'  # doi fail
	@input = '{"subject": "10.25504/FAIRsharing.6k0kwd"}'  # doi fail
#	@input = '{"subject": "BSYNRYMUTXBXSQ-UHFFFAOYSA-N"}' # inchi
#	@input = '{"subject": "LFQSCWFLJHTTHZ-UHFFFAOYSA-N"}' # another inchi
#	@input = '{"subject": "20.1000/105"}'  # handle (fail)
#	@input = '{"subject": "http://linkeddata.systems/Magnaporthe/polyA_Sites"}'  # handle

else 
	@input = $stdin.read
end


cgi = CGI.new

schemas = {'subject' => ['string', "the GUID being tested"]}

@swagger = Swagger.new({
			:title => "FAIR Metrics Gen2 - Data Knowledge Representation Language (weak)",
			:description => "Maturity Indicator to test if the data uses a formal language broadly applicable for knowledge representation.  This particular test takes a broad view of what defines a 'knowledge representation language'; in this evaluation, a knowledge representation language is interpreted as one in which terms are semantically-grounded in ontologies.  Any form of structured data will pass this test",
			:tests_metric => 'https://purl.org/fair-metrics/Gen2_FM_I1A',
			:applies_to_principle => "I1",
			:organization => 'FAIR Metrics Authoring Group',
			:org_url => 'http://fairmetrics.org',
			:responsible_developer => "Mark D Wilkinson",
			:email => 'markw@illuminae.com',
			:developer_ORCiD => '0000-0001-6960-357X',
			:protocol => 'http',
			:host => 'linkeddata.systems',
			:basePath => '/cgi-bin',
			:path => '/FAIR_Tests/gen2_data_kr_language_weak',
			:response_description => 'The response is a binary (1/0), success or failure',
			:schemas => schemas,
			:fairsharing_key_location => '../fairsharing.key',
			:debug => false				 				 	 
})

if (!cgi.request_method or cgi.request_method == "GET") and !debug
        puts "Content-type: application/openapi+yaml;version=3.0\n\n"
        puts @swagger.getSwagger
elsif cgi.request_method == "POST" or debug
        input_json = JSON.parse(@input)
        guid = input_json["subject"]
        @swagger.testedGUID = guid
        response = testGUID
        puts "Content-type: application/json+ld\n\n"
        puts response
end
