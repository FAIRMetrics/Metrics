#!/home/mark_moby_wilkinson/.rvm/rubies/ruby-2.5.1/bin/ruby
require_relative 'fair_metrics_utilities'
require 'cgi'
require 'json'
require 'uri'
require 'rdf'
require 'rdf/turtle'
require 'sparql'

debug = false

def testGUID
	
	guid = @swagger.testedGUID
	
	metadata = Utils::resolveit(guid)  # this is where the magic happens!

	metadata.comments.each do |c|
		@swagger.addComment(c)
	end

	if metadata.guidtype == "unknown"
		@swagger.addComment("  The identifier #{guid} did not match any known identification system (tested inchi, doi, handle, uri) and therefore did not pass this metric.  If you think this is an error, please contact the FAIR Metrics group (http://fairmetrics.org).")
		@swagger.score = 0
		return @swagger.createEvaluationResponse
	end
	
	hash = metadata.hash
	
	properties = Utils::deep_dive_properties(hash)

	dataGUID=""
	
		properties.each do |keyval|
		key, value = nil, nil
		(key, value) = keyval;
		key = key.to_s
		
		Utils::DATA_PREDICATES.each do |prop|
			prop =~ /.*[#\/]([^#\/]+)$/
			if key == prop
				@swagger.addComment "found '#{prop}' in metadata.  "
				dataGUID=value
			end
		end
	end


	g = metadata.graph
	if @swagger.debug
		g.each {|s| $stderr.puts s.subject.to_s + "\tPRED: " + s.predicate.to_s + "\tOBJ: " + s.object.to_s + "\n"}
	end
	
	if g.size > 0  # have we found anything yet?
		Utils::DATA_PREDICATES.each do |prop|
			if prop =~ /schema\.org/
				query = SPARQL.parse("select ?o where {?s <#{prop}> ?b .
									 ?b  <http://schema.org/contentUrl> ?o}")
				results = query.execute(g)
				if  results.any?
					dataGUID=results.first[:o].value
					@swagger.addComment "found identifier #{results.first[:o]} using Schema.org distribution property. "
				end
				query = SPARQL.parse("select ?o where {?s <#{prop}> ?b .
									 ?b  <https://schema.org/contentUrl> ?o}")
				results = query.execute(g)
				if  results.any?
					dataGUID=results.first[:o].value
					@swagger.addComment "found identifier #{results.first[:o]} using Schema.org distribution property. "
				end
			elsif prop =~ /dcat\#/
				query = SPARQL.parse("select ?o where {?s <#{prop}> ?b .
									 ?b  <http://www.w3.org/ns/dcat#accessURL> ?o}")
				results = query.execute(g)
				if  results.any?
					dataGUID=results.first[:o].value
					@swagger.addComment "found identifier #{results.first[:o]} using DCAT distribution property. "
				end
				query = SPARQL.parse("select ?o where {?s <#{prop}> ?b .
									 ?b  <https://www.w3.org/ns/dcat#accessURL> ?o}")
				results = query.execute(g)
				if  results.any?
					dataGUID=results.first[:o].value
					@swagger.addComment "found identifier #{results.first[:o]} using DCAT distribution property. "
				end
			else 
				query = SPARQL.parse("select ?o where {?s <#{prop}> ?o}")
				results = query.execute(g)
				if results.any?
					dataGUID=results.first[:o].value
					@swagger.addComment "found identifier #{results.first[:o]} using #{prop}. "
				end
			end
		end
	end
		
	# hopefully we have it by now... if not... we fail!
	$stderr.puts "\n\nfound identifier #{@identifier} \n\n"

	if dataGUID == ""
		@swagger.score = 0
		@swagger.addComment "Was unable to locate the data identifier in the metadata using any (common) property/predicate reserved for this purpose.  Tested SIO:is-about, SIO:0003323, schema:mainEntity, IAO:0000136, schema:codeRepository, and foaf:primaryTopic.  Fail. "
	else
		testIdentifier(dataGUID) # this will add more comments and a score to @swagger
	end
	

	return @swagger.createEvaluationResponse
end

def testIdentifier(guid)
	
	# This is verbatim from the gen2_metadata_identifier_persistence
	type = Utils::typeit(guid)  # this is where the magic happens!

	if !type
		@swagger.addComment("  The GUID identifier of the data #{guid} did not match any known identification system (tested inchi, doi, handle, uri) and therefore did not pass this metric.  If you think this is an error, please contact the FAIR Metrics group (http://fairmetrics.org).")
		@swagger.score = 0
	elsif type == "uri"
		@swagger.addComment("The GUID appears to be a URL.  Testing known URL persistence schemas (purl, oclc, fdlp, purlz, w3id, ark).  ")
		if (guid =~ /(purl)\./) or (guid =~ /(oclc)\./) or(guid =~ /(fdlp)\./) or (guid =~ /(purlz)\./) or (guid =~ /(w3id)\./) or (guid =~ /(ark)\:/)
			@swagger.addComment("The GUID conforms with #{$1}, which is known to be persistent.  Pass. ")
			@swagger.score = 1
		else
			@swagger.addComment("The GUID does not conform with any known permanent-URL system.  ")
			@swagger.score = 0
		end
	else 
		@swagger.addComment("The GUID of the data is a #{type}, which is known to be persistent.  Pass. ")
		@swagger.score = 1
	end


end




if debug
#	@input = '{"subject": "10.5281/zenodo.1147435"}'  # doi fail
#	@input = '{"subject": "10.5281/zenodo.1065973"}'  # doi fail
#	@input = '{"subject": "BSYNRYMUTXBXSQ-UHFFFAOYSA-N"}' # inchi
#	@input = '{"subject": "LFQSCWFLJHTTHZ-UHFFFAOYSA-N"}' # another inchi
#	@input = '{"subject": "20.1000/105"}'  # handle (fail)
	@input = '{"subject": "http://linkeddata.systems/Magnaporthe/polyA_Sites"}'  # handle

else 
	@input = $stdin.read
end


cgi = CGI.new

schemas = {'subject' => ['string', "the GUID being tested"]}

@swagger = Swagger.new({
			:title => "FAIR Metrics Gen2 - Data Identifier Persistence",
			:description => "Metric to test if the unique identifier of the data resource is likely to be persistent. Known schema are registered in FAIRSharing (https://fairsharing.org/standards/?q=&selected_facets=type_exact:identifier%20schema). For URLs that don't follow a schema in FAIRSharing we test known URL persistence schemas (purl, oclc, fdlp, purlz, w3id, ark).  ",
			:tests_metric => 'https://purl.org/fair-metrics/Gen2_FM_F1B',
			:applies_to_principle => "F1",
			:organization => 'FAIR Metrics Authoring Group',
			:org_url => 'http://fairmetrics.org',
			:responsible_developer => "Mark D Wilkinson",
			:email => 'markw@illuminae.com',
			:developer_ORCiD => '0000-0001-6960-357X',
			:protocol => 'http',
			:host => 'linkeddata.systems',
			:basePath => '/cgi-bin',
			:path => '/FAIR_Tests/gen2_data_identifier_persistence',
			:response_description => 'The response is a binary (1/0), success or failure',
			:schemas => schemas,
			:fairsharing_key_location => '../fairsharing.key',
			:debug => false				 				 
})

if (!cgi.request_method or cgi.request_method == "GET") and !debug
        puts "Content-type: application/openapi+yaml;version=3.0\n\n"
        puts @swagger.getSwagger
elsif cgi.request_method == "POST" or debug
        input_json = JSON.parse(@input)
        guid = input_json["subject"]
        @swagger.testedGUID = guid
        response = testGUID
        puts "Content-type: application/json+ld\n\n"
        puts response
end
