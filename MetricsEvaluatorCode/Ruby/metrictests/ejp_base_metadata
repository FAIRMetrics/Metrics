require_relative 'fair_metrics_utilities'
require 'cgi'
require 'json'
require 'uri'
require 'rdf'
require 'rdf/turtle'
require 'sparql'

debug = false
VERSION = HARVESTER_VERSION + ":" + "Tst-0.0.1"


# @prefix dcat: <http://www.w3.org/ns/dcat#>.
# @prefix dct: <http://purl.org/dc/terms/>.
# @prefix foaf: <http://xmlns.com/foaf/0.1/>.
# @prefix language: <http://id.loc.gov/vocabulary/iso639-1/>.
# @prefix tes: <http://testbed.ejprd.semlab-leiden.nl:10000/>.
# @prefix c: <http://testbed.ejprd.semlab-leiden.nl:10000/catalog/>.
# @prefix n: <http://www.w3.org/2006/vcard/ns#>.
# @prefix n0: <https://herculescrue.github.io/ROH/roh/#>.
# @prefix voc: <https://w3id.org/ejp-rd/vocabulary#>.

# tes:new
#     a dcat:Dataset, dcat:Resource;
#     dct:description "An example dataset";
#     dct:isPartOf c:cdbe703b-aaa9-4119-a35e-18eb2e8d47d0;
#     dct:keyword "test";
#     dct:language language:en;
#     dct:license <https://w3id.org/ejp-rd/resources/licenses/v1.0.txt>;
#     dct:publisher [ a foaf:Agent; foaf:name "Mark Denis Wilkinson" ];
#     dct:title "A minimal dataset";
#     dcat:contactPoint [ a n:Agent; n:url <https://wilkinsonlab.info> ];
#     dcat:theme n0:Administrative;
#     voc:personalData "false".


def testGUID

	@swagger.addComment("INFO: TEST VERSION '#{VERSION}'\n")
	
	
	guid = @swagger.testedGUID
	
	metadata = Utils::resolveit(guid)  # this is where the magic happens!

	metadata.comments.each do |c|
		@swagger.addComment(c)
	end

	@swagger.score = 0

	if metadata.guidtype == "unknown"
		@swagger.addComment("FAILURE: The identifier #{guid} did not match any known identification system.\n")
		return @swagger.createEvaluationResponse
	end
		
	g = metadata.graph
	if @swagger.debug
		g.each {|s| $stderr.puts s.subject.to_s + "\tPRED: " + s.predicate.to_s + "\tOBJ: " + s.object.to_s + "\n"}
	end

	if g.size > 0  # have we found anything yet?
		@swagger.addComment "INFO: found linked-data style structured metadata.  "
	else
		@swagger.addComment "FAILURE: no linked-data style structured metadata found.  "
		@swagger.score = 0
		return @swagger.createEvaluationResponse
	end

	runtest(g: g)	
	return @swagger.createEvaluationResponse
end

def runtest(g:)
	prefixes = "PREFIX dcat: <http://www.w3.org/ns/dcat#> 
	PREFIX dct: <http://purl.org/dc/terms/> 
	"
	predicates = %w{dcat:theme dcat:contactPoint dct:description 
	dct:isPartOf dct:keyword dct:language dct:license 
	dct:publisher dct:title dcat:contactPoint }

	failflag = false
	predicates.each do |p|
		@swagger.addComment "INFO:  Testing for #{p}.\n"
		query = SPARQL.parse("#{prefixes} 
							select ?o where {?s #{p} ?o}")
		results = query.execute(g)
		if results.any?
			@swagger.addComment "WARN: Found the EJP reqired metadata element #{p} '\n"
		else
			@swagger.addComment "FAILURE: the required metadata element #{p} could not be found\n"
			failflag = true
		end
	end
	unless failflag
		@swagger.score = 1
		@swagger.addComment "SUCCESS: Found all of the EJP reqired metadata elements\n"
	else 		
		@swagger.score = 0
		@swagger.addComment "FAILURE: At least one required metadata element is missing\n"
	end
end



if debug
	@input = '{"subject": "10.5281/zenodo.1065973"}'  # doi fail

else 
	@input = $stdin.read
end


ENV['TEST_PROTOCOL'] ||= "http"
ENV['TEST_HOST'] ||= "http://tests:8080s"
ENV['TEST_PATH'] ||= "/tests/"

warn "running"
cgi = CGI.new

schemas = {'subject' => ['string', "the GUID being tested"]}

@swagger = Swagger.new({
			:title => "FAIR Metrics for EJP - Base Metadata",
			:description => "Tests whether the EJP resource has all core required metadata elements",
			:tests_metric => 'https://purl.org/fair-metrics/Gen2_FM_R1.3',
			:version => VERSION,
			:applies_to_principle => "R1.3",
			:organization => 'EJP Metrics Authoring Group',
			:org_url => 'https://ejprdproject.org',
			:responsible_developer => "Mark D Wilkinson",
			:email => 'mark.wilkinson@upm.es',
			:developer_ORCiD => '0000-0001-6960-357X',
			:protocol => ENV['TEST_PROTOCOL'],
			:host => ENV['TEST_HOST'],
			:basePath => ENV['TEST_PATH'],
			:path => 'ejp_base_metadata',
			:response_description => 'The response is a binary (1/0), success or failure',
			:schemas => schemas,
			:fairsharing_key_location => ENV['FAIRSHARING_KEY'],
			:debug => false				 				 
})

if (!cgi.request_method or cgi.request_method == "GET") and !debug
        puts "Content-type: application/openapi+yaml;version=3.0\n\n"
        puts @swagger.getSwagger
elsif cgi.request_method == "POST" or debug
        input_json = JSON.parse(@input)
        guid = input_json["subject"]
        @swagger.testedGUID = guid
        response = testGUID
        puts "Content-type: application/json+ld\n\n"
        puts response
end
