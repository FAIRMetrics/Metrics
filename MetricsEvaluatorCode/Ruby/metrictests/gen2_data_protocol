#!/home/mark_moby_wilkinson/.rvm/rubies/ruby-2.5.1/bin/ruby
require_relative 'fair_metrics_utilities'
require 'cgi'
require 'json'
require 'uri'
require 'rdf'
require 'rdf/turtle'
require 'sparql'

debug = false

def testGUID
	
	guid = @swagger.testedGUID
	
	metadata = Utils::resolveit(guid)  # this is where the magic happens!

	metadata.comments.each do |c|
		@swagger.addComment(c)
	end

	if metadata.guidtype == "unknown"
		@swagger.addComment("FAILURE: The identifier #{guid} did not match any known identification system.\n")
		@swagger.score = 0
		return @swagger.createEvaluationResponse
	end
	
	hash = metadata.hash
	
	properties = Utils::deep_dive_properties(hash)

	dataGUID=""
	
	properties.each do |keyval|
		key, value = nil, nil
		(key, value) = keyval;
		key = key.to_s
		
		@swagger.addComment("INFO: Searching hash-style metadata for keys indicating a pointer to data.\n")
		Utils::DATA_PREDICATES.each do |prop|
			prop =~ /.*[#\/]([^#\/]+)$/
			prop = $1
			@swagger.addComment("INFO: Searching for key: #{prop}.\n")
			if key == prop
				@swagger.addComment "INFO: found '#{prop}' in metadata.  Setting data GUID to #{value} for next test.\n"
				dataGUID=value
			end
		end
	end


	g = metadata.graph
	if @swagger.debug
		g.each {|s| $stderr.puts s.subject.to_s + "\tPRED: " + s.predicate.to_s + "\tOBJ: " + s.object.to_s + "\n"}
	end
	
	if g.size > 0  # have we found anything yet?
		@swagger.addComment("INFO: Searching Linked Data metadata for predicates indicating a pointer to data.\n")
		Utils::DATA_PREDICATES.each do |prop|
			@swagger.addComment("INFO: SPARQLing for #{prop}.\n")
			if prop =~ /schema\.org/
				query = SPARQL.parse("select ?o where {?s <#{prop}> ?b .
									 ?b  <http://schema.org/contentUrl> ?o}")
				results = query.execute(g)
				if  results.any?
					dataGUID=results.first[:o].value
					@swagger.addComment "INFO: found identifier #{results.first[:o].value} using Schema.org distribution property.\n"
				end
				query = SPARQL.parse("select ?o where {?s <#{prop}> ?b .
									 ?b  <https://schema.org/contentUrl> ?o}")
				results = query.execute(g)
				if  results.any?
					dataGUID=results.first[:o].value
					@swagger.addComment "INFO: found identifier #{results.first[:o].value} using Schema.org distribution property.\n"
				end
			elsif prop =~ /dcat\#/
				query = SPARQL.parse("select ?o where {?s <#{prop}> ?b .
									 ?b  <http://www.w3.org/ns/dcat#accessURL> ?o}")
				results = query.execute(g)
				if  results.any?
					dataGUID=results.first[:o].value
					@swagger.addComment "INFO: found identifier #{results.first[:o].value} using DCAT distribution property.\n"
				end
				query = SPARQL.parse("select ?o where {?s <#{prop}> ?b .
									 ?b  <https://www.w3.org/ns/dcat#accessURL> ?o}")
				results = query.execute(g)
				if  results.any?
					dataGUID=results.first[:o].value
					@swagger.addComment "INFO: found identifier #{results.first[:o].value} using DCAT distribution property.\n"
				end
			else 
				query = SPARQL.parse("select ?o where {?s <#{prop}> ?o}")
				results = query.execute(g)
				if results.any?
					dataGUID=results.first[:o].value
					@swagger.addComment "INFO: found identifier #{results.first[:o].value} using #{prop}.\n"
				end
			end
		end
	end

	if (dataGUID == "") or (!dataGUID.is_a?String) 
		@swagger.score = 0
		@swagger.addComment "FAILURE: Was unable to locate the data identifier in the metadata using any (common) property/predicate reserved for this purpose.  Tested #{Utils::DATA_PREDICATES.join(" & ")} as both keys, and linked data predicates  "
		return @swagger.createEvaluationResponse
	end

	# if we	get here, we at least have a string representing the GUID.
	# Let's now run it through the metadata collection routine
	# to see what it is

	metadata2 = Utils::typeit(dataGUID)  # this is where the magic happens!

	if !metadata2
		@swagger.addComment("FAILURE: The identifier #{dataGUID} did not match any known identification system.\n")
		@swagger.score = 0
		return @swagger.createEvaluationResponse
	else
		@swagger.addComment("SUCCESS: The identifier #{dataGUID} is recognized as a #{metadata2}, which is resolvable by an open and free protocol.\n")
		@swagger.score = 1
		return @swagger.createEvaluationResponse
	end

		
end


if debug
#	@input = '{"subject": "10.5281/zenodo.1147435"}'  # doi fail
#	@input = '{"subject": "10.5281/zenodo.1065973"}'  # doi fail
#	@input = '{"subject": "BSYNRYMUTXBXSQ-UHFFFAOYSA-N"}' # inchi
#	@input = '{"subject": "LFQSCWFLJHTTHZ-UHFFFAOYSA-N"}' # another inchi
#	@input = '{"subject": "20.1000/105"}'  # handle (fail)
	@input = '{"subject": "http://linkeddata.systems/Magnaporthe/polyA_Sites"}'  # handle

else 
	@input = $stdin.read
end


cgi = CGI.new

schemas = {'subject' => ['string', "the GUID being tested"]}

@swagger = Swagger.new({
			:title => "FAIR Metrics Gen2 - Uses open free protocol for data retrieval",
			:description => "Data may be retrieved by an open and free protocol.  Tests data GUID for its resolution protocol.  Currently passes InChI Keys, DOIs, Handles, and URLs.  Recognition of other identifiers will be added upon request by the community.",
			:tests_metric => 'https://purl.org/fair-metrics/Gen2_FM_A1.1',
			:applies_to_principle => "A1.1",
			:organization => 'FAIR Metrics Authoring Group',
			:org_url => 'http://fairmetrics.org',
			:responsible_developer => "Mark D Wilkinson",
			:email => 'markw@illuminae.com',
			:developer_ORCiD => '0000-0001-6960-357X',
			:protocol => 'http',
			:host => 'linkeddata.systems',
			:basePath => '/cgi-bin',
			:path => '/FAIR_Tests/gen2_metadata_protocol',
			:response_description => 'The response is a binary (1/0), success or failure',
			:schemas => schemas,
			:fairsharing_key_location => '../fairsharing.key',
			:debug => false				 				 
})

if (!cgi.request_method or cgi.request_method == "GET") and !debug
        puts "Content-type: application/openapi+yaml;version=3.0\n\n"
        puts @swagger.getSwagger
elsif cgi.request_method == "POST" or debug
        input_json = JSON.parse(@input)
        guid = input_json["subject"]
        @swagger.testedGUID = guid
        response = testGUID
        puts "Content-type: application/json+ld\n\n"
        puts response
end
